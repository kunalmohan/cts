{"version":3,"sources":["../src/constants.ts"],"names":["ExtensionName","AddressMode","BindingType","BlendFactor","BlendOperation","CompareFunction","CullMode","FilterMode","FrontFace","IndexFormat","InputStepMode","LoadOp","PrimitiveTopology","StencilOperation","StoreOp","TextureDimension","TextureFormat","TextureComponentType","TextureViewDimension","VertexFormat","TextureAspect","BufferUsage","ColorWrite","ShaderStage","TextureUsage"],"mappings":"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","sourcesContent":["// https://github.com/gpuweb/gpuweb/blob/402b69138fbedf4a3c9c85cd1bf7e1cc27c1b34e/spec/index.bs\n\n// tslint:disable:variable-name\n\n// String enums\nexport const enum ExtensionName {\n  AnisotropicFiltering = 'anisotropic-filtering',\n}\nexport const enum AddressMode {\n  ClampToEdge = 'clamp-to-edge',\n  Repeat = 'repeat',\n  MirrorRepeat = 'mirror-repeat',\n}\nexport const enum BindingType {\n  UniformBuffer = 'uniform-buffer',\n  StorageBuffer = 'storage-buffer',\n  ReadonlyStorageBuffer = 'readonly-storage-buffer',\n  Sampler = 'sampler',\n  SampledTexture = 'sampled-texture',\n  StorageTexture = 'storage-texture',\n}\nexport const enum BlendFactor {\n  Zero = 'zero',\n  One = 'one',\n  SrcColor = 'src-color',\n  OneMinusSrcColor = 'one-minus-src-color',\n  SrcAlpha = 'src-alpha',\n  OneMinusSrcAlpha = 'one-minus-src-alpha',\n  DstColor = 'dst-color',\n  OneMinusDstColor = 'one-minus-dst-color',\n  DstAlpha = 'dst-alpha',\n  OneMinusDstAlpha = 'one-minus-dst-alpha',\n  SrcAlphaSaturated = 'src-alpha-saturated',\n  BlendColor = 'blend-color',\n  OneMinusBlendColor = 'one-minus-blend-color',\n}\nexport const enum BlendOperation {\n  Add = 'add',\n  Subtract = 'subtract',\n  ReverseSubtract = 'reverse-subtract',\n  Min = 'min',\n  Max = 'max',\n}\nexport const enum CompareFunction {\n  Never = 'never',\n  Less = 'less',\n  Equal = 'equal',\n  LessEqual = 'less-equal',\n  Greater = 'greater',\n  NotEqual = 'not-equal',\n  GreaterEqual = 'greater-equal',\n  Always = 'always',\n}\nexport const enum CullMode {\n  None = 'none',\n  Front = 'front',\n  Back = 'back',\n}\nexport const enum FilterMode {\n  Nearest = 'nearest',\n  Linear = 'linear',\n}\nexport const enum FrontFace {\n  CCW = 'ccw',\n  CW = 'cw',\n}\nexport const enum IndexFormat {\n  Uint16 = 'uint16',\n  Uint32 = 'uint32',\n}\nexport const enum InputStepMode {\n  Vertex = 'vertex',\n  Instance = 'instance',\n}\nexport const enum LoadOp {\n  Load = 'load',\n}\nexport const enum PrimitiveTopology {\n  PointList = 'point-list',\n  LineList = 'line-list',\n  LineStrip = 'line-strip',\n  TriangleList = 'triangle-list',\n  TriangleStrip = 'triangle-strip',\n}\nexport const enum StencilOperation {\n  Keep = 'keep',\n  Zero = 'zero',\n  Replace = 'replace',\n  Invert = 'invert',\n  IncrementClamp = 'increment-clamp',\n  DecrementClamp = 'decrement-clamp',\n  IncrementWrap = 'increment-wrap',\n  DecrementWrap = 'decrement-wrap',\n}\nexport const enum StoreOp {\n  Store = 'store',\n  Clear = 'clear',\n}\nexport const enum TextureDimension {\n  E1d = '1d',\n  E2d = '2d',\n  E3d = '3d',\n}\nexport const enum TextureFormat {\n  R8Unorm = 'r8unorm',\n  R8Snorm = 'r8snorm',\n  R8Uint = 'r8uint',\n  R8Sint = 'r8sint',\n  R16Uint = 'r16uint',\n  R16Sint = 'r16sint',\n  R16Float = 'r16float',\n  RG8Unorm = 'rg8unorm',\n  RG8Snorm = 'rg8snorm',\n  RG8Uint = 'rg8uint',\n  RG8Sint = 'rg8sint',\n  R32Uint = 'r32uint',\n  R32Sint = 'r32sint',\n  R32Float = 'r32float',\n  RG16Uint = 'rg16uint',\n  RG16Sint = 'rg16sint',\n  RG16Float = 'rg16float',\n  RGBA8Unorm = 'rgba8unorm',\n  RGBA8UnormSRGB = 'rgba8unorm-srgb',\n  RGBA8Snorm = 'rgba8snorm',\n  RGBA8Uint = 'rgba8uint',\n  RGBA8Sint = 'rgba8sint',\n  BGRA8Unorm = 'bgra8unorm',\n  BGRA8UnormSRGB = 'bgra8unorm-srgb',\n  RGB10A2Unorm = 'rgb10a2unorm',\n  RGB11B10Float = 'rg11b10float',\n  RG32Uint = 'rg32uint',\n  RG32Sint = 'rg32sint',\n  RG32Float = 'rg32float',\n  RGBA16Uint = 'rgba16uint',\n  RGBA16Sint = 'rgba16sint',\n  RGBA16Float = 'rgba16float',\n  RGBA32Uint = 'rgba32uint',\n  RGBA32Sint = 'rgba32sint',\n  RGBA32Float = 'rgba32float',\n  Depth32Float = 'depth32float',\n  Depth24Plus = 'depth24plus',\n  Depth24PlusStencil8 = 'depth24plus-stencil8',\n}\nexport const enum TextureComponentType {\n  Float = 'float',\n  Sint = 'sint',\n  Uint = 'uint',\n}\nexport const enum TextureViewDimension {\n  E1d = '1d',\n  E2d = '2d',\n  E2dArray = '2d-array',\n  Cube = 'cube',\n  CubeArray = 'cube-array',\n  E3d = '3d',\n}\nexport const enum VertexFormat {\n  Uchar2 = 'uchar2',\n  Uchar4 = 'uchar4',\n  Char2 = 'char2',\n  Char4 = 'char4',\n  Uchar2Norm = 'uchar2norm',\n  Uchar4Norm = 'uchar4norm',\n  Char2Norm = 'char2norm',\n  Char4Norm = 'char4norm',\n  Ushort2 = 'ushort2',\n  Ushort4 = 'ushort4',\n  Short2 = 'short2',\n  Short4 = 'short4',\n  Ushort2Norm = 'ushort2norm',\n  Ushort4Norm = 'ushort4norm',\n  Short2Norm = 'short2norm',\n  Short4Norm = 'short4norm',\n  Half2 = 'half2',\n  Half4 = 'half4',\n  Float = 'float',\n  Float2 = 'float2',\n  Float3 = 'float3',\n  Float4 = 'float4',\n  Uint = 'uint',\n  Uint2 = 'uint2',\n  Uint3 = 'uint3',\n  Uint4 = 'uint4',\n  Int = 'int',\n  Int2 = 'int2',\n  Int3 = 'int3',\n  Int4 = 'int4',\n}\nexport const enum TextureAspect {\n  All = 'all',\n  StencilOnly = 'stencil-only',\n  DepthOnly = 'depth-only',\n}\n\n// Bit fields\nexport const enum BufferUsage {\n  MapRead = 0x0001,\n  MapWrite = 0x0002,\n  CopySrc = 0x0004,\n  CopyDst = 0x0008,\n  Index = 0x0010,\n  Vertex = 0x0020,\n  Uniform = 0x0040,\n  Storage = 0x0080,\n  Indirect = 0x0100,\n}\nexport const enum ColorWrite {\n  Red = 0x1,\n  Green = 0x2,\n  Blue = 0x4,\n  Alpha = 0x8,\n  All = 0xf,\n}\nexport const enum ShaderStage {\n  Vertex = 0x1,\n  Fragment = 0x2,\n  Compute = 0x4,\n}\nexport const enum TextureUsage {\n  CopySrc = 0x01,\n  CopyDst = 0x02,\n  Sampled = 0x04,\n  Storage = 0x08,\n  OutputAttachment = 0x10,\n}\n"],"file":"constants.js"}
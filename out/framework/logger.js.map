{"version":3,"sources":["../../src/framework/logger.ts"],"names":["SkipTestCase","extractPublicParams","makeQueryString","assert","getStackTrace","now","version","LogMessageWithStack","Error","constructor","name","ex","includeStack","message","stack","undefined","toJSON","m","Logger","record","spec","result","cases","results","push","TestSpecRecorder","asJSON","space","JSON","stringify","test","params","status","timems","TestCaseRecorder","PassState","pass","start","debug","startTime","logs","state","debugging","finish","endTime","Math","ceil","warn","setState","fail","skipped","skip","threw","max"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,cAA7B;AAEA,SAAoBC,mBAApB,QAA+C,mBAA/C;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,GAAhC,QAA2C,iBAA3C;AACA,SAASC,OAAT,QAAwB,cAAxB;AAyBA,OAAO,MAAMC,mBAAN,SAAkCC,KAAlC,CAAwC;AAC7CC,EAAAA,WAAW,CAACC,IAAD,EAAeC,EAAf,EAA0BC,YAAqB,GAAG,IAAlD,EAAwD;AACjE,UAAMD,EAAE,CAACE,OAAT;AAEA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKI,KAAL,GAAaF,YAAY,GAAGD,EAAE,CAACG,KAAN,GAAcC,SAAvC;AACD;;AAEDC,EAAAA,MAAM,GAAW;AACf,QAAIC,CAAC,GAAG,KAAKP,IAAb;;AACA,QAAI,KAAKG,OAAT,EAAkB;AAChBI,MAAAA,CAAC,IAAI,OAAO,KAAKJ,OAAjB;AACD;;AACD,QAAI,KAAKC,KAAT,EAAgB;AACdG,MAAAA,CAAC,IAAI,OAAOb,aAAa,CAAC,IAAD,CAAzB;AACD;;AACD,WAAOa,CAAP;AACD;;AAjB4C;AAoB/C,OAAO,MAAMC,MAAN,CAAa;AAGlBT,EAAAA,WAAW,GAAG;AAAA,qCAF2B,EAE3B;AAAE;;AAEhBU,EAAAA,MAAM,CAACC,IAAD,EAA2D;AAC/D,UAAMC,MAA0B,GAAG;AAAED,MAAAA,IAAI,EAAElB,eAAe,CAACkB,IAAD,CAAvB;AAA+BE,MAAAA,KAAK,EAAE;AAAtC,KAAnC;AACA,SAAKC,OAAL,CAAaC,IAAb,CAAkBH,MAAlB;AACA,WAAO,CAAC,IAAII,gBAAJ,CAAqBJ,MAArB,CAAD,EAA+BA,MAA/B,CAAP;AACD;;AAEDK,EAAAA,MAAM,CAACC,KAAD,EAAyB;AAC7B,WAAOC,IAAI,CAACC,SAAL,CAAe;AAAEvB,MAAAA,OAAF;AAAWiB,MAAAA,OAAO,EAAE,KAAKA;AAAzB,KAAf,EAAmDR,SAAnD,EAA8DY,KAA9D,CAAP;AACD;;AAbiB;AAgBpB,OAAO,MAAMF,gBAAN,CAAuB;AAG5BhB,EAAAA,WAAW,CAACY,MAAD,EAA6B;AAAA;;AACtC,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEDF,EAAAA,MAAM,CAACW,IAAD,EAAeC,MAAf,EAAiF;AACrF,UAAMV,MAA0B,GAAG;AACjCS,MAAAA,IADiC;AAEjCC,MAAAA,MAAM,EAAEA,MAAM,GAAG9B,mBAAmB,CAAC8B,MAAD,CAAtB,GAAiC,IAFd;AAGjCC,MAAAA,MAAM,EAAE,SAHyB;AAIjCC,MAAAA,MAAM,EAAE,CAAC;AAJwB,KAAnC;AAMA,SAAKZ,MAAL,CAAYC,KAAZ,CAAkBE,IAAlB,CAAuBH,MAAvB;AACA,WAAO,CAAC,IAAIa,gBAAJ,CAAqBb,MAArB,CAAD,EAA+BA,MAA/B,CAAP;AACD;;AAhB2B;IAmBzBc,S;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAOL,OAAO,MAAMD,gBAAN,CAAuB;AAO5BzB,EAAAA,WAAW,CAACY,MAAD,EAA6B;AAAA;;AAAA,mCALxBc,SAAS,CAACC,IAKc;;AAAA,uCAJpB,CAAC,CAImB;;AAAA,kCAHF,EAGE;;AAAA,uCAFpB,KAEoB;;AACtC,SAAKf,MAAL,GAAcA,MAAd;AACD;;AAEDgB,EAAAA,KAAK,CAACC,KAAc,GAAG,KAAlB,EAA+B;AAClC,SAAKC,SAAL,GAAiBlC,GAAG,EAApB;AACA,SAAKmC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAaN,SAAS,CAACC,IAAvB;AACA,SAAKM,SAAL,GAAiBJ,KAAjB;AACD;;AAEDK,EAAAA,MAAM,GAAS;AACbxC,IAAAA,MAAM,CAAC,KAAKoC,SAAL,IAAkB,CAAnB,EAAsB,yBAAtB,CAAN;AAEA,UAAMK,OAAO,GAAGvC,GAAG,EAAnB,CAHa,CAIb;;AACA,SAAKgB,MAAL,CAAYY,MAAZ,GAAqBY,IAAI,CAACC,IAAL,CAAU,CAACF,OAAO,GAAG,KAAKL,SAAhB,IAA6B,IAAvC,IAA+C,IAApE;AACA,SAAKlB,MAAL,CAAYW,MAAZ,GAAqBG,SAAS,CAAC,KAAKM,KAAN,CAA9B;AAEA,SAAKpB,MAAL,CAAYmB,IAAZ,GAAmB,KAAKA,IAAxB;AACA,SAAKE,SAAL,GAAiB,KAAjB;AACD;;AAEDJ,EAAAA,KAAK,CAAC3B,EAAD,EAAkB;AACrB,QAAI,CAAC,KAAK+B,SAAV,EAAqB;AACnB;AACD;;AACD,SAAKF,IAAL,CAAUhB,IAAV,CAAe,IAAIjB,mBAAJ,CAAwB,OAAxB,EAAiCI,EAAjC,EAAqC,KAArC,CAAf;AACD;;AAEDoC,EAAAA,IAAI,CAACpC,EAAD,EAAkB;AACpB,SAAKqC,QAAL,CAAcb,SAAS,CAACY,IAAxB;AACA,SAAKP,IAAL,CAAUhB,IAAV,CAAe,IAAIjB,mBAAJ,CAAwB,MAAxB,EAAgCI,EAAhC,CAAf;AACD;;AAEDsC,EAAAA,IAAI,CAACtC,EAAD,EAAkB;AACpB,SAAKqC,QAAL,CAAcb,SAAS,CAACc,IAAxB;AACA,SAAKT,IAAL,CAAUhB,IAAV,CAAe,IAAIjB,mBAAJ,CAAwB,MAAxB,EAAgCI,EAAhC,CAAf;AACD;;AAEDuC,EAAAA,OAAO,CAACvC,EAAD,EAAyB;AAC9B,SAAKqC,QAAL,CAAcb,SAAS,CAACgB,IAAxB;AACA,SAAKX,IAAL,CAAUhB,IAAV,CAAe,IAAIjB,mBAAJ,CAAwB,MAAxB,EAAgCI,EAAhC,CAAf;AACD;;AAEDyC,EAAAA,KAAK,CAACzC,EAAD,EAAkB;AACrB,QAAIA,EAAE,YAAYX,YAAlB,EAAgC;AAC9B,WAAKkD,OAAL,CAAavC,EAAb;AACA;AACD;;AAED,SAAKqC,QAAL,CAAcb,SAAS,CAACc,IAAxB;AACA,SAAKT,IAAL,CAAUhB,IAAV,CAAe,IAAIjB,mBAAJ,CAAwB,WAAxB,EAAqCI,EAArC,CAAf;AACD;;AAEOqC,EAAAA,QAAR,CAAiBP,KAAjB,EAAyC;AACvC,SAAKA,KAAL,GAAaI,IAAI,CAACQ,GAAL,CAAS,KAAKZ,KAAd,EAAqBA,KAArB,CAAb;AACD;;AAhE2B","sourcesContent":["import { SkipTestCase } from './fixture.js';\nimport { TestSpecID } from './id.js';\nimport { ParamSpec, extractPublicParams } from './params/index.js';\nimport { makeQueryString } from './url_query.js';\nimport { assert, getStackTrace, now } from './util/index.js';\nimport { version } from './version.js';\n\ntype Status = 'running' | 'pass' | 'skip' | 'warn' | 'fail';\nexport interface LiveTestSpecResult {\n  readonly spec: string;\n  readonly cases: LiveTestCaseResult[];\n}\n\ninterface TestCaseResult {\n  readonly test: string;\n  readonly params: ParamSpec | null;\n  status: Status;\n  timems: number;\n}\n\nexport interface LiveTestCaseResult extends TestCaseResult {\n  logs?: LogMessageWithStack[];\n}\n\nexport interface TransferredTestCaseResult extends TestCaseResult {\n  // When transferred from a worker, a LogMessageWithStack turns into a generic Error\n  // (its prototype gets lost and replaced with Error).\n  logs?: Error[];\n}\n\nexport class LogMessageWithStack extends Error {\n  constructor(name: string, ex: Error, includeStack: boolean = true) {\n    super(ex.message);\n\n    this.name = name;\n    this.stack = includeStack ? ex.stack : undefined;\n  }\n\n  toJSON(): string {\n    let m = this.name;\n    if (this.message) {\n      m += ': ' + this.message;\n    }\n    if (this.stack) {\n      m += '\\n' + getStackTrace(this);\n    }\n    return m;\n  }\n}\n\nexport class Logger {\n  readonly results: LiveTestSpecResult[] = [];\n\n  constructor() {}\n\n  record(spec: TestSpecID): [TestSpecRecorder, LiveTestSpecResult] {\n    const result: LiveTestSpecResult = { spec: makeQueryString(spec), cases: [] };\n    this.results.push(result);\n    return [new TestSpecRecorder(result), result];\n  }\n\n  asJSON(space?: number): string {\n    return JSON.stringify({ version, results: this.results }, undefined, space);\n  }\n}\n\nexport class TestSpecRecorder {\n  private result: LiveTestSpecResult;\n\n  constructor(result: LiveTestSpecResult) {\n    this.result = result;\n  }\n\n  record(test: string, params: ParamSpec | null): [TestCaseRecorder, LiveTestCaseResult] {\n    const result: LiveTestCaseResult = {\n      test,\n      params: params ? extractPublicParams(params) : null,\n      status: 'running',\n      timems: -1,\n    };\n    this.result.cases.push(result);\n    return [new TestCaseRecorder(result), result];\n  }\n}\n\nenum PassState {\n  pass = 0,\n  skip = 1,\n  warn = 2,\n  fail = 3,\n}\n\nexport class TestCaseRecorder {\n  private result: LiveTestCaseResult;\n  private state = PassState.pass;\n  private startTime = -1;\n  private logs: LogMessageWithStack[] = [];\n  private debugging = false;\n\n  constructor(result: LiveTestCaseResult) {\n    this.result = result;\n  }\n\n  start(debug: boolean = false): void {\n    this.startTime = now();\n    this.logs = [];\n    this.state = PassState.pass;\n    this.debugging = debug;\n  }\n\n  finish(): void {\n    assert(this.startTime >= 0, 'finish() before start()');\n\n    const endTime = now();\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil((endTime - this.startTime) * 1000) / 1000;\n    this.result.status = PassState[this.state] as Status;\n\n    this.result.logs = this.logs;\n    this.debugging = false;\n  }\n\n  debug(ex: Error): void {\n    if (!this.debugging) {\n      return;\n    }\n    this.logs.push(new LogMessageWithStack('DEBUG', ex, false));\n  }\n\n  warn(ex: Error): void {\n    this.setState(PassState.warn);\n    this.logs.push(new LogMessageWithStack('WARN', ex));\n  }\n\n  fail(ex: Error): void {\n    this.setState(PassState.fail);\n    this.logs.push(new LogMessageWithStack('FAIL', ex));\n  }\n\n  skipped(ex: SkipTestCase): void {\n    this.setState(PassState.skip);\n    this.logs.push(new LogMessageWithStack('SKIP', ex));\n  }\n\n  threw(ex: Error): void {\n    if (ex instanceof SkipTestCase) {\n      this.skipped(ex);\n      return;\n    }\n\n    this.setState(PassState.fail);\n    this.logs.push(new LogMessageWithStack('EXCEPTION', ex));\n  }\n\n  private setState(state: PassState): void {\n    this.state = Math.max(this.state, state);\n  }\n}\n"],"file":"logger.js"}
{"version":3,"sources":["../../../src/framework/test_filter/filter_one_file.ts"],"names":["testSpecEquals","paramsEquals","paramsSupersets","FilterOneFile","constructor","specId","iterate","loader","spec","import","suite","path","id","description","g","getCases","definitelyOneFile","filterTestGroup","group","filter","log","rc","FilterByTestMatch","testPrefix","testcase","testMatches","test","idIfSingle","length","undefined","matches","startsWith","FilterByParamsMatch","params","caseMatches","FilterByParamsExact"],"mappings":"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","sourcesContent":["import { TestCaseID, TestSpecID, TestSpecOrTestOrCaseID, testSpecEquals } from '../id.js';\nimport { TestFileLoader, TestSpec } from '../loader.js';\nimport { TestSpecRecorder } from '../logger.js';\nimport { ParamSpec, paramsEquals, paramsSupersets } from '../params/index.js';\nimport { RunCase, RunCaseIterable } from '../test_group.js';\n\nimport { TestFilterResult } from './index.js';\nimport { TestFilter } from './internal.js';\n\nabstract class FilterOneFile implements TestFilter {\n  protected readonly specId: TestSpecID;\n\n  constructor(specId: TestSpecID) {\n    this.specId = specId;\n  }\n\n  abstract getCases(spec: TestSpec): RunCaseIterable;\n\n  async iterate(loader: TestFileLoader): Promise<TestFilterResult[]> {\n    const spec = (await loader.import(\n      `${this.specId.suite}/${this.specId.path}.spec.js`\n    )) as TestSpec;\n    return [\n      {\n        id: this.specId,\n        spec: {\n          description: spec.description,\n          g: this.getCases(spec),\n        },\n      },\n    ];\n  }\n\n  definitelyOneFile(): true {\n    return true;\n  }\n\n  abstract idIfSingle(): TestSpecOrTestOrCaseID | undefined;\n  abstract matches(id: TestSpecOrTestOrCaseID): boolean;\n}\n\ntype TestGroupFilter = (testcase: TestCaseID) => boolean;\nfunction filterTestGroup(group: RunCaseIterable, filter: TestGroupFilter): RunCaseIterable {\n  return {\n    *iterate(log: TestSpecRecorder): Iterable<RunCase> {\n      for (const rc of group.iterate(log)) {\n        if (filter(rc.id)) {\n          yield rc;\n        }\n      }\n    },\n  };\n}\n\nexport class FilterByTestMatch extends FilterOneFile {\n  private readonly testPrefix: string;\n\n  constructor(specId: TestSpecID, testPrefix: string) {\n    super(specId);\n    this.testPrefix = testPrefix;\n  }\n\n  getCases(spec: TestSpec): RunCaseIterable {\n    return filterTestGroup(spec.g, testcase => this.testMatches(testcase.test));\n  }\n\n  idIfSingle(): TestSpecOrTestOrCaseID | undefined {\n    if (this.testPrefix.length !== 0) {\n      return undefined;\n    }\n    // This is one whole spec file.\n    return { spec: this.specId };\n  }\n\n  matches(id: TestSpecOrTestOrCaseID): boolean {\n    if (id.test === undefined) {\n      return false;\n    }\n    return testSpecEquals(id.spec, this.specId) && this.testMatches(id.test);\n  }\n\n  private testMatches(test: string): boolean {\n    return test.startsWith(this.testPrefix);\n  }\n}\n\nexport class FilterByParamsMatch extends FilterOneFile {\n  private readonly test: string;\n  private readonly params: ParamSpec | null;\n\n  constructor(specId: TestSpecID, test: string, params: ParamSpec | null) {\n    super(specId);\n    this.test = test;\n    this.params = params;\n  }\n\n  getCases(spec: TestSpec): RunCaseIterable {\n    return filterTestGroup(spec.g, testcase => this.caseMatches(testcase.test, testcase.params));\n  }\n\n  idIfSingle(): TestSpecOrTestOrCaseID | undefined {\n    if (this.params !== null) {\n      return undefined;\n    }\n    // This is one whole test.\n    return { spec: this.specId, test: this.test };\n  }\n\n  matches(id: TestSpecOrTestOrCaseID): boolean {\n    if (id.test === undefined) {\n      return false;\n    }\n    return testSpecEquals(id.spec, this.specId) && this.caseMatches(id.test, id.params);\n  }\n\n  private caseMatches(test: string, params: ParamSpec | null | undefined): boolean {\n    if (params === undefined) {\n      return false;\n    }\n    return test === this.test && paramsSupersets(params, this.params);\n  }\n}\n\nexport class FilterByParamsExact extends FilterOneFile {\n  private readonly test: string;\n  private readonly params: ParamSpec | null;\n\n  constructor(specId: TestSpecID, test: string, params: ParamSpec | null) {\n    super(specId);\n    this.test = test;\n    this.params = params;\n  }\n\n  getCases(spec: TestSpec): RunCaseIterable {\n    return filterTestGroup(spec.g, testcase => this.caseMatches(testcase.test, testcase.params));\n  }\n\n  idIfSingle(): TestSpecOrTestOrCaseID | undefined {\n    // This is one single test case.\n    return { spec: this.specId, test: this.test, params: this.params };\n  }\n\n  matches(id: TestSpecOrTestOrCaseID): boolean {\n    if (id.test === undefined || id.params === undefined) {\n      return false;\n    }\n    return testSpecEquals(id.spec, this.specId) && this.caseMatches(id.test, id.params);\n  }\n\n  private caseMatches(test: string, params: ParamSpec | null): boolean {\n    return test === this.test && paramsEquals(params, this.params);\n  }\n}\n"],"file":"filter_one_file.js"}
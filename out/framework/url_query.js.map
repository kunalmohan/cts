{"version":3,"sources":["../../src/framework/url_query.ts"],"names":["stringifyPublicParams","unreachable","encodeSelectively","s","ret","encodeURIComponent","replace","checkPublicParamType","v","undefined","Array","x","makeQueryString","spec","testcase","suite","path","test","params"],"mappings":";;;;AACA,SAAwBA,qBAAxB,QAAqD,mBAArD;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,OAAO,SAASC,iBAAT,CAA2BC,CAA3B,EAA8C;AACnD,MAAIC,GAAG,GAAGC,kBAAkB,CAACF,CAAD,CAA5B;AACAC,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACA,SAAOF,GAAP;AACD;AAED,OAAO,SAASG,oBAAT,CAA8BC,CAA9B,EAAsD;AAC3D,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAAtC,IAAkD,OAAOA,CAAP,KAAa,SAA/D,IAA4EA,CAAC,KAAKC,SAAtF,EAAiG;AAC/F;AACD;;AACD,MAAID,CAAC,YAAYE,KAAjB,EAAwB;AACtB,SAAK,MAAMC,CAAX,IAAgBH,CAAhB,EAAmB;AACjB,UAAI,OAAOG,CAAP,KAAa,QAAjB,EAA2B;AACzB;AACD;AACF;;AACD;AACD;;AACDV,EAAAA,WAAW,CAAC,uCAAuCO,CAAxC,CAAX;AACD;AAED,OAAO,SAASI,eAAT,CAAyBC,IAAzB,EAA2CC,QAA3C,EAA0E;AAC/E,MAAIX,CAAC,GAAGU,IAAI,CAACE,KAAL,GAAa,GAArB;AACAZ,EAAAA,CAAC,IAAIU,IAAI,CAACG,IAAL,GAAY,GAAjB;;AACA,MAAIF,QAAQ,KAAKL,SAAjB,EAA4B;AAC1BN,IAAAA,CAAC,IAAIW,QAAQ,CAACG,IAAT,GAAgB,GAArB;AACAd,IAAAA,CAAC,IAAIH,qBAAqB,CAACc,QAAQ,CAACI,MAAV,CAA1B;AACD;;AACD,SAAOhB,iBAAiB,CAACC,CAAD,CAAxB;AACD","sourcesContent":["import { TestCaseID, TestSpecID } from './id.js';\nimport { ParamArgument, stringifyPublicParams } from './params/index.js';\nimport { unreachable } from './util/index.js';\n\nexport function encodeSelectively(s: string): string {\n  let ret = encodeURIComponent(s);\n  ret = ret.replace(/%22/g, '\"');\n  ret = ret.replace(/%2C/g, ',');\n  ret = ret.replace(/%2F/g, '/');\n  ret = ret.replace(/%3A/g, ':');\n  ret = ret.replace(/%3D/g, '=');\n  ret = ret.replace(/%5B/g, '[');\n  ret = ret.replace(/%5D/g, ']');\n  ret = ret.replace(/%7B/g, '{');\n  ret = ret.replace(/%7D/g, '}');\n  return ret;\n}\n\nexport function checkPublicParamType(v: ParamArgument): void {\n  if (typeof v === 'number' || typeof v === 'string' || typeof v === 'boolean' || v === undefined) {\n    return;\n  }\n  if (v instanceof Array) {\n    for (const x of v) {\n      if (typeof x !== 'number') {\n        break;\n      }\n    }\n    return;\n  }\n  unreachable('Invalid type for test case params ' + v);\n}\n\nexport function makeQueryString(spec: TestSpecID, testcase?: TestCaseID): string {\n  let s = spec.suite + ':';\n  s += spec.path + ':';\n  if (testcase !== undefined) {\n    s += testcase.test + '=';\n    s += stringifyPublicParams(testcase.params);\n  }\n  return encodeSelectively(s);\n}\n"],"file":"url_query.js"}
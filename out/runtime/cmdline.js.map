{"version":3,"sources":["../../src/runtime/cmdline.ts"],"names":["fs","process","assert","unreachable","TestLoader","Logger","makeQueryString","usage","rc","console","log","exit","existsSync","verbose","debug","printJSON","filterArgs","a","argv","slice","startsWith","push","length","loader","files","loadTestsFromCmdLine","failed","warned","skipped","total","f","spec","rec","record","id","t","g","iterate","res","run","printResults","status","asJSON","passed","pct","x","toFixed","rpt","xs","toString","padStart","Math","log10","ex","results","r","timems","logs","l","toJSON","replace"],"mappings":"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","sourcesContent":["// tslint:disable: no-console\n\nimport * as fs from 'fs';\nimport * as process from 'process';\n\nimport { TestSpecID } from '../framework/id.js';\nimport { assert, unreachable } from '../framework/index.js';\nimport { TestLoader } from '../framework/loader.js';\nimport { LiveTestCaseResult, Logger } from '../framework/logger.js';\nimport { makeQueryString } from '../framework/url_query.js';\n\nfunction usage(rc: number): never {\n  console.log('Usage:');\n  console.log('  tools/run [OPTIONS...] QUERIES...');\n  console.log('  tools/run unittests: cts:buffers/');\n  console.log('Options:');\n  console.log('  --verbose     Print result/log of every test as it runs.');\n  console.log('  --debug       Include debug messages in logging.');\n  console.log('  --print-json  Print the complete result JSON in the output.');\n  return process.exit(rc);\n}\n\nif (!fs.existsSync('src/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nlet verbose = false;\nlet debug = false;\nlet printJSON = false;\nconst filterArgs = [];\nfor (const a of process.argv.slice(2)) {\n  if (a.startsWith('-')) {\n    if (a === '--verbose') {\n      verbose = true;\n    } else if (a === '--debug') {\n      debug = true;\n    } else if (a === '--print-json') {\n      printJSON = true;\n    } else {\n      usage(1);\n    }\n  } else {\n    filterArgs.push(a);\n  }\n}\n\nif (filterArgs.length === 0) {\n  usage(0);\n}\n\n(async () => {\n  try {\n    const loader = new TestLoader();\n    const files = await loader.loadTestsFromCmdLine(filterArgs);\n\n    const log = new Logger();\n\n    const failed: Array<[TestSpecID, LiveTestCaseResult]> = [];\n    const warned: Array<[TestSpecID, LiveTestCaseResult]> = [];\n    const skipped: Array<[TestSpecID, LiveTestCaseResult]> = [];\n\n    let total = 0;\n    for (const f of files) {\n      if (!('g' in f.spec)) {\n        continue;\n      }\n\n      const [rec] = log.record(f.id);\n      for (const t of f.spec.g.iterate(rec)) {\n        const res = await t.run(debug);\n        if (verbose) {\n          printResults([[f.id, res]]);\n        }\n\n        total++;\n        if (res.status === 'pass') {\n        } else if (res.status === 'fail') {\n          failed.push([f.id, res]);\n        } else if (res.status === 'warn') {\n          warned.push([f.id, res]);\n        } else if (res.status === 'skip') {\n          skipped.push([f.id, res]);\n        } else {\n          unreachable('unrecognized status');\n        }\n      }\n    }\n\n    assert(total > 0, 'found no tests!');\n\n    // TODO: write results out somewhere (a file?)\n    if (printJSON) {\n      console.log(log.asJSON(2));\n    }\n\n    if (skipped.length) {\n      console.log('');\n      console.log('** Skipped **');\n      printResults(skipped);\n    }\n    if (warned.length) {\n      console.log('');\n      console.log('** Warnings **');\n      printResults(warned);\n    }\n    if (failed.length) {\n      console.log('');\n      console.log('** Failures **');\n      printResults(failed);\n    }\n\n    const passed = total - warned.length - failed.length - skipped.length;\n    function pct(x: number): string {\n      return ((100 * x) / total).toFixed(2);\n    }\n    function rpt(x: number): string {\n      const xs = x.toString().padStart(1 + Math.log10(total), ' ');\n      return `${xs} / ${total} = ${pct(x).padStart(6, ' ')}%`;\n    }\n    console.log('');\n    console.log(`** Summary **\nPassed  w/o warnings = ${rpt(passed)}\nPassed with warnings = ${rpt(warned.length)}\nSkipped              = ${rpt(skipped.length)}\nFailed               = ${rpt(failed.length)}`);\n\n    if (failed.length || warned.length) {\n      process.exit(1);\n    }\n  } catch (ex) {\n    console.log(ex);\n    process.exit(1);\n  }\n})();\n\nfunction printResults(results: Array<[TestSpecID, LiveTestCaseResult]>): void {\n  for (const [id, r] of results) {\n    console.log(`[${r.status}] ${makeQueryString(id, r)} (${r.timems}ms). Log:`);\n    if (r.logs) {\n      for (const l of r.logs) {\n        console.log('  - ' + l.toJSON().replace(/\\n/g, '\\n    '));\n      }\n    }\n  }\n}\n"],"file":"cmdline.js"}
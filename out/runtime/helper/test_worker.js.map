{"version":3,"sources":["../../../src/runtime/helper/test_worker.ts"],"names":["LogMessageWithStack","TestWorker","constructor","Map","selfPath","import","meta","url","selfPathDir","substring","lastIndexOf","workerPath","worker","Worker","type","onmessage","ev","query","data","result","logs","l","Object","setPrototypeOf","prototype","resolvers","get","run","debug","postMessage","Promise","resolve","set"],"mappings":";;;;;;AAAA,SAEEA,mBAFF,QAIO,2BAJP;AAMA,OAAO,MAAMC,UAAN,CAAiB;AAItBC,EAAAA,WAAW,GAAG;AAAA;;AAAA,uCAFM,IAAIC,GAAJ,EAEN;;AACZ,UAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYC,GAA7B;AACA,UAAMC,WAAW,GAAGJ,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBL,QAAQ,CAACM,WAAT,CAAqB,GAArB,CAAtB,CAApB;AACA,UAAMC,UAAU,GAAGH,WAAW,GAAG,wBAAjC;AACA,SAAKI,MAAL,GAAc,IAAIC,MAAJ,CAAWF,UAAX,EAAuB;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAvB,CAAd;;AACA,SAAKF,MAAL,CAAYG,SAAZ,GAAwBC,EAAE,IAAI;AAC5B,YAAMC,KAAa,GAAGD,EAAE,CAACE,IAAH,CAAQD,KAA9B;AACA,YAAME,MAAiC,GAAGH,EAAE,CAACE,IAAH,CAAQC,MAAlD;;AACA,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,aAAK,MAAMC,CAAX,IAAgBF,MAAM,CAACC,IAAvB,EAA6B;AAC3BE,UAAAA,MAAM,CAACC,cAAP,CAAsBF,CAAtB,EAAyBrB,mBAAmB,CAACwB,SAA7C;AACD;AACF;;AACD,WAAKC,SAAL,CAAeC,GAAf,CAAmBT,KAAnB,EAA2BE,MAA3B,EAR4B,CAU5B;AACA;AACD,KAZD;AAaD;;AAEDQ,EAAAA,GAAG,CAACV,KAAD,EAAgBW,KAAc,GAAG,KAAjC,EAAqE;AACtE,SAAKhB,MAAL,CAAYiB,WAAZ,CAAwB;AAAEZ,MAAAA,KAAF;AAASW,MAAAA;AAAT,KAAxB;AACA,WAAO,IAAIE,OAAJ,CAAYC,OAAO,IAAI;AAC5B,WAAKN,SAAL,CAAeO,GAAf,CAAmBf,KAAnB,EAA0Bc,OAA1B;AACD,KAFM,CAAP;AAGD;;AA7BqB","sourcesContent":["import {\n  LiveTestCaseResult,\n  LogMessageWithStack,\n  TransferredTestCaseResult,\n} from '../../framework/logger.js';\n\nexport class TestWorker {\n  private worker: Worker;\n  private resolvers = new Map<string, (result: LiveTestCaseResult) => void>();\n\n  constructor() {\n    const selfPath = import.meta.url;\n    const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n    const workerPath = selfPathDir + '/test_worker-worker.js';\n    this.worker = new Worker(workerPath, { type: 'module' });\n    this.worker.onmessage = ev => {\n      const query: string = ev.data.query;\n      const result: TransferredTestCaseResult = ev.data.result;\n      if (result.logs) {\n        for (const l of result.logs) {\n          Object.setPrototypeOf(l, LogMessageWithStack.prototype);\n        }\n      }\n      this.resolvers.get(query)!(result as LiveTestCaseResult);\n\n      // TODO(kainino0x): update the Logger with this result (or don't have a logger and update the\n      // entire results JSON somehow at some point).\n    };\n  }\n\n  run(query: string, debug: boolean = false): Promise<LiveTestCaseResult> {\n    this.worker.postMessage({ query, debug });\n    return new Promise(resolve => {\n      this.resolvers.set(query, resolve);\n    });\n  }\n}\n"],"file":"test_worker.js"}
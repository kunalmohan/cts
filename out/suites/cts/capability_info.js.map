{"version":3,"sources":["../../../src/suites/cts/capability_info.ts"],"names":["C","kTextureFormatInfo","renderable","color","kTextureFormats","Object","keys","kMaxBindingsPerBindGroup","kPerStageBindingLimits","kStagesAll","ShaderStage","Vertex","Fragment","Compute","kStagesNonVertex","kBindingTypeInfo","type","validStages","perStageLimitType","maxDynamicCount","kBindingTypes","kShaderStages","kShaderStageCombinations"],"mappings":"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","sourcesContent":["import { C } from '../../framework/index.js';\n\n// Textures\n\nexport const kTextureFormatInfo: {\n  [k in GPUTextureFormat]: {\n    renderable: boolean;\n    color: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  // Try to keep these manually-formatted in a readable grid.\n  // (Note: this list should always match the one in the spec.)\n\n  // 8-bit formats\n  'r8unorm':                { renderable:  true, color: true  },\n  'r8snorm':                { renderable: false, color: true  },\n  'r8uint':                 { renderable:  true, color: true  },\n  'r8sint':                 { renderable:  true, color: true  },\n  // 16-bit formats\n  'r16uint':                { renderable:  true, color: true  },\n  'r16sint':                { renderable:  true, color: true  },\n  'r16float':               { renderable:  true, color: true  },\n  'rg8unorm':               { renderable:  true, color: true  },\n  'rg8snorm':               { renderable: false, color: true  },\n  'rg8uint':                { renderable:  true, color: true  },\n  'rg8sint':                { renderable:  true, color: true  },\n  // 32-bit formats\n  'r32uint':                { renderable:  true, color: true  },\n  'r32sint':                { renderable:  true, color: true  },\n  'r32float':               { renderable:  true, color: true  },\n  'rg16uint':               { renderable:  true, color: true  },\n  'rg16sint':               { renderable:  true, color: true  },\n  'rg16float':              { renderable:  true, color: true  },\n  'rgba8unorm':             { renderable:  true, color: true  },\n  'rgba8unorm-srgb':        { renderable:  true, color: true  },\n  'rgba8snorm':             { renderable: false, color: true  },\n  'rgba8uint':              { renderable:  true, color: true  },\n  'rgba8sint':              { renderable:  true, color: true  },\n  'bgra8unorm':             { renderable:  true, color: true  },\n  'bgra8unorm-srgb':        { renderable:  true, color: true  },\n  // Packed 32-bit formats\n  'rgb10a2unorm':           { renderable:  true, color: true  },\n  'rg11b10float':           { renderable: false, color: true  },\n  // 64-bit formats\n  'rg32uint':               { renderable:  true, color: true  },\n  'rg32sint':               { renderable:  true, color: true  },\n  'rg32float':              { renderable:  true, color: true  },\n  'rgba16uint':             { renderable:  true, color: true  },\n  'rgba16sint':             { renderable:  true, color: true  },\n  'rgba16float':            { renderable:  true, color: true  },\n  // 128-bit formats\n  'rgba32uint':             { renderable:  true, color: true  },\n  'rgba32sint':             { renderable:  true, color: true  },\n  'rgba32float':            { renderable:  true, color: true  },\n  // Depth/stencil formats\n  'depth32float':           { renderable:  true, color: false },\n  'depth24plus':            { renderable:  true, color: false },\n  'depth24plus-stencil8':   { renderable:  true, color: false },\n};\nexport const kTextureFormats = Object.keys(kTextureFormatInfo) as GPUTextureFormat[];\n\n// Bindings\n\nexport const kMaxBindingsPerBindGroup = 16;\n\nexport type PerStageBindingLimitType =\n  | 'uniform-buffer'\n  | 'storage-buffer'\n  | 'sampler'\n  | 'sampled-texture'\n  | 'storage-texture';\nexport const kPerStageBindingLimits: {\n  [k in PerStageBindingLimitType]: number;\n} = /* prettier-ignore */ {\n  'uniform-buffer':  12,\n  'storage-buffer':  4,\n  'sampler':         16,\n  'sampled-texture': 16,\n  'storage-texture': 4,\n};\n\nconst kStagesAll = C.ShaderStage.Vertex | C.ShaderStage.Fragment | C.ShaderStage.Compute;\nconst kStagesNonVertex = C.ShaderStage.Fragment | C.ShaderStage.Compute;\nexport const kBindingTypeInfo: {\n  [k in GPUBindingType]: {\n    type: 'buffer' | 'texture' | 'sampler';\n    validStages: GPUShaderStageFlags;\n    perStageLimitType: PerStageBindingLimitType;\n    maxDynamicCount: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniform-buffer':          { type: 'buffer',  validStages: kStagesAll, perStageLimitType: 'uniform-buffer',  maxDynamicCount: 8 },\n  'storage-buffer':          { type: 'buffer',  validStages: kStagesNonVertex, perStageLimitType: 'storage-buffer',  maxDynamicCount: 4 },\n  'readonly-storage-buffer': { type: 'buffer',  validStages: kStagesAll, perStageLimitType: 'storage-buffer',  maxDynamicCount: 4 },\n  'sampler':                 { type: 'sampler', validStages: kStagesAll, perStageLimitType: 'sampler',         maxDynamicCount: 0 },\n  'sampled-texture':         { type: 'texture', validStages: kStagesAll, perStageLimitType: 'sampled-texture', maxDynamicCount: 0 },\n  'storage-texture':         { type: 'texture', validStages: kStagesAll, perStageLimitType: 'storage-texture', maxDynamicCount: 0 },\n};\nexport const kBindingTypes = Object.keys(kBindingTypeInfo) as GPUBindingType[];\n\nexport const kShaderStages: GPUShaderStageFlags[] = [\n  C.ShaderStage.Vertex,\n  C.ShaderStage.Fragment,\n  C.ShaderStage.Compute,\n];\nexport const kShaderStageCombinations: GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n"],"file":"capability_info.js"}
{"version":3,"sources":["../../../src/suites/cts/gpu_test.ts"],"names":["getGPU","Fixture","assert","unreachable","glslangInstance","DevicePool","undefined","initialize","gpu","adapter","requestAdapter","device","requestDevice","ex","state","acquire","release","devicePool","GPUTest","init","queue","defaultQueue","isSafari","test","navigator","userAgent","supportsSPIRV","popErrorScope","pushErrorScope","initialized","finalize","gpuValidationError","GPUValidationError","fail","message","gpuOutOfMemoryError","GPUOutOfMemoryError","initGLSL","glslangPath","glslangModule","default","skip","Promise","resolve","then","glslang","createShaderModule","desc","makeShaderModuleFromGLSL","stage","glsl","code","compileGLSL","createCopyForMapRead","src","size","dst","createBuffer","usage","GPUBufferUsage","MAP_READ","COPY_DST","c","createCommandEncoder","copyBufferToBuffer","submit","finish","expectContents","expected","exp","Uint8Array","buffer","byteOffset","byteLength","eventualAsyncExpectation","niceStack","actual","mapReadAsync","check","checkBuffer","rec","destroy","expectBuffer","Error","lines","failedPixels","i","push","expHex","Array","from","map","x","toString","padStart","join","actHex"],"mappings":"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","sourcesContent":["import { getGPU } from '../../framework/gpu/implementation.js';\nimport { Fixture, assert, unreachable } from '../../framework/index.js';\n\ntype glslang = typeof import('@webgpu/glslang/dist/web-devel/glslang');\ntype Glslang = import('@webgpu/glslang/dist/web-devel/glslang').Glslang;\ntype ShaderStage = import('@webgpu/glslang/dist/web-devel/glslang').ShaderStage;\n\nlet glslangInstance: Glslang | undefined;\n\nclass DevicePool {\n  device: GPUDevice | undefined = undefined;\n  state: 'free' | 'acquired' | 'uninitialized' | 'failed' = 'uninitialized';\n\n  private async initialize(): Promise<void> {\n    try {\n      const gpu = getGPU();\n      const adapter = await gpu.requestAdapter();\n      this.device = await adapter.requestDevice();\n    } catch (ex) {\n      this.state = 'failed';\n      throw ex;\n    }\n  }\n\n  async acquire(): Promise<GPUDevice> {\n    assert(this.state !== 'acquired', 'Device was in use');\n    assert(this.state !== 'failed', 'Failed to initialize WebGPU device');\n\n    const state = this.state;\n    this.state = 'acquired';\n    if (state === 'uninitialized') {\n      await this.initialize();\n    }\n\n    return this.device!;\n  }\n\n  release(device: GPUDevice): void {\n    assert(this.state === 'acquired');\n    this.device = device;\n    this.state = 'free';\n  }\n}\n\nconst devicePool = new DevicePool();\n\nexport class GPUTest extends Fixture {\n  device: GPUDevice = undefined!;\n  queue: GPUQueue = undefined!;\n  initialized = false;\n  private supportsSPIRV = true;\n\n  async init(): Promise<void> {\n    super.init();\n    this.device = await devicePool.acquire();\n    this.queue = this.device.defaultQueue;\n\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    if (isSafari) {\n      this.supportsSPIRV = false;\n    }\n\n    try {\n      await this.device.popErrorScope();\n      unreachable('There was an error scope on the stack at the beginning of the test');\n    } catch (ex) {}\n\n    this.device.pushErrorScope('out-of-memory');\n    this.device.pushErrorScope('validation');\n\n    this.initialized = true;\n  }\n\n  async finalize(): Promise<void> {\n    super.finalize();\n\n    if (this.initialized) {\n      const gpuValidationError = await this.device.popErrorScope();\n      if (gpuValidationError !== null) {\n        assert(gpuValidationError instanceof GPUValidationError);\n        this.fail(`Unexpected validation error occurred: ${gpuValidationError.message}`);\n      }\n\n      const gpuOutOfMemoryError = await this.device.popErrorScope();\n      if (gpuOutOfMemoryError !== null) {\n        assert(gpuOutOfMemoryError instanceof GPUOutOfMemoryError);\n        this.fail('Unexpected out-of-memory error occurred');\n      }\n    }\n\n    devicePool.release(this.device);\n  }\n\n  async initGLSL(): Promise<void> {\n    if (!glslangInstance) {\n      const glslangPath = '../../glslang.js';\n      let glslangModule: () => Promise<Glslang>;\n      try {\n        glslangModule = ((await import(glslangPath)) as glslang).default;\n      } catch (ex) {\n        this.skip('glslang is not available');\n      }\n      await new Promise(resolve => {\n        glslangModule().then((glslang: Glslang) => {\n          glslangInstance = glslang;\n          resolve();\n        });\n      });\n    }\n  }\n\n  createShaderModule(desc: GPUShaderModuleDescriptor): GPUShaderModule {\n    if (!this.supportsSPIRV) {\n      this.skip('SPIR-V not available');\n    }\n    return this.device.createShaderModule(desc);\n  }\n\n  makeShaderModuleFromGLSL(stage: ShaderStage, glsl: string): GPUShaderModule {\n    assert(\n      glslangInstance !== undefined,\n      'GLSL compiler is not instantiated. Run `await t.initGLSL()` first'\n    );\n\n    const code = glslangInstance.compileGLSL(glsl, stage, false);\n    return this.device.createShaderModule({ code });\n  }\n\n  createCopyForMapRead(src: GPUBuffer, size: number): GPUBuffer {\n    const dst = this.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n\n    const c = this.device.createCommandEncoder();\n    c.copyBufferToBuffer(src, 0, dst, 0, size);\n\n    this.queue.submit([c.finish()]);\n\n    return dst;\n  }\n\n  // TODO: add an expectContents for textures, which logs data: uris on failure\n\n  expectContents(src: GPUBuffer, expected: ArrayBufferView): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n    const dst = this.createCopyForMapRead(src, expected.buffer.byteLength);\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const actual = new Uint8Array(await dst.mapReadAsync());\n      const check = this.checkBuffer(actual, exp);\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.fail(niceStack);\n      }\n      dst.destroy();\n    });\n  }\n\n  expectBuffer(actual: Uint8Array, exp: Uint8Array): void {\n    const check = this.checkBuffer(actual, exp);\n    if (check !== undefined) {\n      this.rec.fail(new Error(check));\n    }\n  }\n\n  checkBuffer(actual: Uint8Array, exp: Uint8Array): string | undefined {\n    const size = exp.byteLength;\n    if (actual.byteLength !== size) {\n      return 'size mismatch';\n    }\n    const lines = [];\n    let failedPixels = 0;\n    for (let i = 0; i < size; ++i) {\n      if (actual[i] !== exp[i]) {\n        if (failedPixels > 4) {\n          lines.push('... and more');\n          break;\n        }\n        failedPixels++;\n        lines.push(`at [${i}], expected ${exp[i]}, got ${actual[i]}`);\n      }\n    }\n\n    // TODO: Could make a more convenient message, which could look like e.g.:\n    //\n    //   Starting at offset 48,\n    //              got 22222222 ABCDABCD 99999999\n    //     but expected 22222222 55555555 99999999\n    //\n    // or\n    //\n    //   Starting at offset 0,\n    //              got 00000000 00000000 00000000 00000000 (... more)\n    //     but expected 00FF00FF 00FF00FF 00FF00FF 00FF00FF (... more)\n    //\n    // Or, maybe these diffs aren't actually very useful (given we have the prints just above here),\n    // and we should remove them. More important will be logging of texture data in a visual format.\n\n    if (size <= 256 && failedPixels > 0) {\n      const expHex = Array.from(exp)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      const actHex = Array.from(actual)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      lines.push('EXPECT: ' + expHex);\n      lines.push('ACTUAL: ' + actHex);\n    }\n    if (failedPixels) {\n      return lines.join('\\n');\n    }\n    return undefined;\n  }\n}\n"],"file":"gpu_test.js"}
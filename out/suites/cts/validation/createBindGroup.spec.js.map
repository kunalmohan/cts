{"version":3,"sources":["../../../../src/suites/cts/validation/createBindGroup.spec.ts"],"names":["description","C","TestGroup","pcombine","poptions","unreachable","kBindingTypes","BindingResourceType","ValidationTest","resourceBindingMatches","clone","descriptor","JSON","parse","stringify","g","test","t","bindGroupLayout","device","createBindGroupLayout","bindings","binding","visibility","GPUShaderStage","COMPUTE","type","goodDescriptor","resource","buffer","getStorageBuffer","layout","createBindGroup","badDescriptor","expectValidationError","bindingType","params","resourceType","getBindingResource","shouldError","Object","keys","usage","_usage","FRAGMENT","size","width","height","depth","format","TextureFormat","R8Unorm","createTexture","createView","mismatchedTextureUsages","GPUTextureUsage","COPY_SRC","COPY_DST","SAMPLED","STORAGE","OUTPUT_ATTACHMENT","mismatchedTextureUsage","TextureUsage","Sampled","Storage","textureComponentType","mismatchedTextureFormats","mismatchedTextureFormat","textureDimension","arrayLayerCount","RGBA8Unorm","offset","_success","createBuffer","GPUBufferUsage","undefined"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroup validation tests.\n`;\n\nimport { C, TestGroup, pcombine, poptions, unreachable } from '../../../framework/index.js';\nimport { kBindingTypes } from '../capability_info.js';\n\nimport { BindingResourceType, ValidationTest, resourceBindingMatches } from './validation_test.js';\n\nfunction clone(descriptor: GPUTextureDescriptor): GPUTextureDescriptor {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = new TestGroup(ValidationTest);\n\ng.test('binding count mismatch', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' }],\n  });\n\n  const goodDescriptor = {\n    bindings: [{ binding: 0, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Another binding is not expected.\n  const badDescriptor = {\n    bindings: [\n      { binding: 0, resource: { buffer: t.getStorageBuffer() } },\n      // Another binding is added.\n      { binding: 1, resource: { buffer: t.getStorageBuffer() } },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('binding must be present in layout', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' }],\n  });\n\n  const goodDescriptor = {\n    bindings: [{ binding: 0, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Binding index 0 must be present.\n  const badDescriptor = {\n    bindings: [{ binding: 1, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('buffer binding must contain exactly one buffer of its type', t => {\n  const bindingType: GPUBindingType = t.params.bindingType;\n  const resourceType: BindingResourceType = t.params.resourceType;\n\n  const layout = t.device.createBindGroupLayout({\n    bindings: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: bindingType }],\n  });\n\n  const resource = t.getBindingResource(resourceType);\n\n  const shouldError = !resourceBindingMatches(bindingType, resourceType);\n  t.expectValidationError(() => {\n    t.device.createBindGroup({ layout, bindings: [{ binding: 0, resource }] });\n  }, shouldError);\n}).params(\n  pcombine(\n    poptions('bindingType', kBindingTypes),\n    poptions('resourceType', Object.keys(BindingResourceType))\n  )\n);\n\ng.test('texture binding must have correct usage', async t => {\n  const type: GPUBindingType = t.params.type;\n  const usage: GPUTextureUsageFlags = t.params._usage;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type }],\n  });\n\n  const goodDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    format: C.TextureFormat.R8Unorm,\n    usage,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    bindings: [{ binding: 0, resource: t.device.createTexture(goodDescriptor).createView() }],\n    layout: bindGroupLayout,\n  });\n\n  function* mismatchedTextureUsages(): Iterable<GPUTextureUsageFlags> {\n    yield GPUTextureUsage.COPY_SRC;\n    yield GPUTextureUsage.COPY_DST;\n    if (type !== 'sampled-texture') {\n      yield GPUTextureUsage.SAMPLED;\n    }\n    if (type !== 'storage-texture') {\n      yield GPUTextureUsage.STORAGE;\n    }\n    yield GPUTextureUsage.OUTPUT_ATTACHMENT;\n  }\n\n  // Mismatched texture binding usages are not valid.\n  for (const mismatchedTextureUsage of mismatchedTextureUsages()) {\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.usage = mismatchedTextureUsage;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        bindings: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n        layout: bindGroupLayout,\n      });\n    });\n  }\n}).params([\n  { type: 'sampled-texture', _usage: C.TextureUsage.Sampled },\n  { type: 'storage-texture', _usage: C.TextureUsage.Storage },\n]);\n\ng.test('texture must have correct component type', async t => {\n  const { textureComponentType } = t.params;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: 'sampled-texture',\n        textureComponentType,\n      },\n    ],\n  });\n\n  // TODO: Test more texture component types.\n  let format: GPUTextureFormat;\n  if (textureComponentType === 'float') {\n    format = 'r8unorm';\n  } else if (textureComponentType === 'sint') {\n    format = 'r8sint';\n  } else if (textureComponentType === 'uint') {\n    format = 'r8uint';\n  } else {\n    unreachable('Unexpected texture component type');\n  }\n\n  const goodDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    format,\n    usage: GPUTextureUsage.SAMPLED,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    bindings: [\n      {\n        binding: 0,\n        resource: t.device.createTexture(goodDescriptor).createView(),\n      },\n    ],\n    layout: bindGroupLayout,\n  });\n\n  function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n    if (textureComponentType !== 'float') {\n      yield 'r8unorm';\n    }\n    if (textureComponentType !== 'sint') {\n      yield 'r8sint';\n    }\n    if (textureComponentType !== 'uint') {\n      yield 'r8uint';\n    }\n  }\n\n  // Mismatched texture binding formats are not valid.\n  for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.format = mismatchedTextureFormat;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        bindings: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n        layout: bindGroupLayout,\n      });\n    });\n  }\n}).params(poptions('textureComponentType', ['float', 'sint', 'uint']));\n\n// TODO: Write test for all dimensions.\ng.test('texture must have correct dimension', async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: 'sampled-texture',\n        textureDimension: '2d',\n      },\n    ],\n  });\n\n  const goodDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    arrayLayerCount: 1,\n    format: C.TextureFormat.RGBA8Unorm,\n    usage: GPUTextureUsage.SAMPLED,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    bindings: [{ binding: 0, resource: t.device.createTexture(goodDescriptor).createView() }],\n    layout: bindGroupLayout,\n  });\n\n  // Mismatched texture binding formats are not valid.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.arrayLayerCount = 2;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup({\n      bindings: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n      layout: bindGroupLayout,\n    });\n  });\n});\n\ng.test('buffer offset and size for bind groups match', async t => {\n  const { offset, size, _success } = t.params;\n\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    bindings: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' }],\n  });\n\n  const buffer = t.device.createBuffer({\n    size: 1024,\n    usage: GPUBufferUsage.STORAGE,\n  });\n\n  const descriptor = {\n    bindings: [\n      {\n        binding: 0,\n        resource: { buffer, offset, size },\n      },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  if (_success) {\n    // Control case\n    t.device.createBindGroup(descriptor);\n  } else {\n    // Buffer offset and/or size don't match in bind groups.\n    t.expectValidationError(() => {\n      t.device.createBindGroup(descriptor);\n    });\n  }\n}).params([\n  { offset: 0, size: 512, _success: true }, // offset 0 is valid\n  { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n  // unaligned buffer offset is invalid\n  { offset: 1, size: 256, _success: false },\n  { offset: 1, size: undefined, _success: false },\n  { offset: 128, size: 256, _success: false },\n  { offset: 255, size: 256, _success: false },\n\n  { offset: 0, size: 256, _success: true }, // touching the start of the buffer works\n  { offset: 256 * 3, size: 256, _success: true }, // touching the end of the buffer works\n  { offset: 1024, size: 0, _success: true }, // touching the end of the buffer works\n  { offset: 0, size: 1024, _success: true }, // touching the full buffer works\n  { offset: 0, size: undefined, _success: true }, // touching the full buffer works\n  { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n  { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n  { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n]);\n"],"file":"createBindGroup.spec.js"}
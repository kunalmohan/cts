{"version":3,"sources":["../../../../src/suites/cts/validation/validation_test.ts"],"names":["unreachable","GPUTest","BindingResourceType","resourceBindingMatches","b","r","ValidationTest","getStorageBuffer","device","createBuffer","size","usage","GPUBufferUsage","STORAGE","getUniformBuffer","UNIFORM","getErrorBuffer","pushErrorScope","errorBuffer","popErrorScope","getSampler","createSampler","getErrorSampler","sampler","lodMinClamp","getSampledTexture","createTexture","width","height","depth","format","GPUTextureUsage","SAMPLED","getStorageTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","buffer","expectValidationError","fn","shouldError","promise","eventualAsyncExpectation","niceStack","gpuValidationError","message","rec","fail","GPUValidationError","debug"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,6BAA5B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,WAAYC,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAWZ,OAAO,SAASC,sBAAT,CAAgCC,CAAhC,EAAmDC,CAAnD,EAAoF;AACzF,UAAQD,CAAR;AACE,SAAK,gBAAL;AACA,SAAK,yBAAL;AACE,aAAOC,CAAC,KAAK,gBAAb;;AACF,SAAK,iBAAL;AACE,aAAOA,CAAC,KAAK,qBAAb;;AACF,SAAK,SAAL;AACE,aAAOA,CAAC,KAAK,SAAb;;AACF,SAAK,iBAAL;AACE,aAAOA,CAAC,KAAK,qBAAb;;AACF,SAAK,gBAAL;AACE,aAAOA,CAAC,KAAK,gBAAb;;AACF;AACEL,MAAAA,WAAW,CAAC,wBAAD,CAAX;AAbJ;AAeD;AAED,OAAO,MAAMM,cAAN,SAA6BL,OAA7B,CAAqC;AAC1CM,EAAAA,gBAAgB,GAAc;AAC5B,WAAO,KAAKC,MAAL,CAAYC,YAAZ,CAAyB;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAEC,cAAc,CAACC;AAApC,KAAzB,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,GAAc;AAC5B,WAAO,KAAKN,MAAL,CAAYC,YAAZ,CAAyB;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAEC,cAAc,CAACG;AAApC,KAAzB,CAAP;AACD;;AAEDC,EAAAA,cAAc,GAAc;AAC1B,SAAKR,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMC,WAAW,GAAG,KAAKV,MAAL,CAAYC,YAAZ,CAAyB;AAC3CC,MAAAA,IAAI,EAAE,IADqC;AAE3CC,MAAAA,KAAK,EAAE,MAFoC,CAE5B;;AAF4B,KAAzB,CAApB;AAIA,SAAKH,MAAL,CAAYW,aAAZ;AACA,WAAOD,WAAP;AACD;;AAEDE,EAAAA,UAAU,GAAe;AACvB,WAAO,KAAKZ,MAAL,CAAYa,aAAZ,EAAP;AACD;;AAEDC,EAAAA,eAAe,GAAe;AAC5B,SAAKd,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMM,OAAO,GAAG,KAAKf,MAAL,CAAYa,aAAZ,CAA0B;AAAEG,MAAAA,WAAW,EAAE,CAAC;AAAhB,KAA1B,CAAhB;AACA,SAAKhB,MAAL,CAAYW,aAAZ;AACA,WAAOI,OAAP;AACD;;AAEDE,EAAAA,iBAAiB,GAAe;AAC9B,WAAO,KAAKjB,MAAL,CAAYkB,aAAZ,CAA0B;AAC/BhB,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,MAAM,EAAE,EAArB;AAAyBC,QAAAA,KAAK,EAAE;AAAhC,OADyB;AAE/BC,MAAAA,MAAM,EAAE,YAFuB;AAG/BnB,MAAAA,KAAK,EAAEoB,eAAe,CAACC;AAHQ,KAA1B,CAAP;AAKD;;AAEDC,EAAAA,iBAAiB,GAAe;AAC9B,WAAO,KAAKzB,MAAL,CAAYkB,aAAZ,CAA0B;AAC/BhB,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,MAAM,EAAE,EAArB;AAAyBC,QAAAA,KAAK,EAAE;AAAhC,OADyB;AAE/BC,MAAAA,MAAM,EAAE,YAFuB;AAG/BnB,MAAAA,KAAK,EAAEoB,eAAe,CAAClB;AAHQ,KAA1B,CAAP;AAKD;;AAEDqB,EAAAA,mBAAmB,GAAmB;AACpC,SAAK1B,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACA,UAAMkB,IAAI,GAAG,KAAK3B,MAAL,CACVkB,aADU,CACI;AACbhB,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE,CAApB;AAAuBC,QAAAA,KAAK,EAAE;AAA9B,OADO;AAEbC,MAAAA,MAAM,EAAE,YAFK;AAGbnB,MAAAA,KAAK,EAAEoB,eAAe,CAACC;AAHV,KADJ,EAMVI,UANU,EAAb;AAOA,SAAK5B,MAAL,CAAYW,aAAZ;AACA,WAAOgB,IAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAACC,WAAD,EAAuD;AACvE,YAAQA,WAAR;AACE,WAAK,cAAL;AACE,eAAO;AAAEC,UAAAA,MAAM,EAAE,KAAKvB,cAAL;AAAV,SAAP;;AACF,WAAK,eAAL;AACE,eAAO,KAAKM,eAAL,EAAP;;AACF,WAAK,mBAAL;AACE,eAAO,KAAKY,mBAAL,EAAP;;AACF,WAAK,gBAAL;AACE,eAAO;AAAEK,UAAAA,MAAM,EAAE,KAAKzB,gBAAL;AAAV,SAAP;;AACF,WAAK,gBAAL;AACE,eAAO;AAAEyB,UAAAA,MAAM,EAAE,KAAKhC,gBAAL;AAAV,SAAP;;AACF,WAAK,SAAL;AACE,eAAO,KAAKa,UAAL,EAAP;;AACF,WAAK,qBAAL;AACE,eAAO,KAAKK,iBAAL,GAAyBW,UAAzB,EAAP;;AACF,WAAK,qBAAL;AACE,eAAO,KAAKH,iBAAL,GAAyBG,UAAzB,EAAP;;AACF;AACEpC,QAAAA,WAAW,CAAC,+BAAD,CAAX;AAlBJ;AAoBD;;AAEDwC,EAAAA,qBAAqB,CAACC,EAAD,EAAeC,WAAoB,GAAG,IAAtC,EAAkD;AACrE;AACA,QAAIA,WAAW,KAAK,KAApB,EAA2B;AACzBD,MAAAA,EAAE;AACF;AACD;;AAED,SAAKjC,MAAL,CAAYS,cAAZ,CAA2B,YAA3B;AACAwB,IAAAA,EAAE;AACF,UAAME,OAAO,GAAG,KAAKnC,MAAL,CAAYW,aAAZ,EAAhB;AAEA,SAAKyB,wBAAL,CAA8B,MAAMC,SAAN,IAAmB;AAC/C,YAAMC,kBAAkB,GAAG,MAAMH,OAAjC;;AACA,UAAI,CAACG,kBAAL,EAAyB;AACvBD,QAAAA,SAAS,CAACE,OAAV,GAAoB,gCAApB;AACA,aAAKC,GAAL,CAASC,IAAT,CAAcJ,SAAd;AACD,OAHD,MAGO,IAAIC,kBAAkB,YAAYI,kBAAlC,EAAsD;AAC3DL,QAAAA,SAAS,CAACE,OAAV,GAAqB,+BAA8BD,kBAAkB,CAACC,OAAQ,EAA9E;AACA,aAAKC,GAAL,CAASG,KAAT,CAAeN,SAAf;AACD;AACF,KATD;AAUD;;AAvGyC","sourcesContent":["import { unreachable } from '../../../framework/index.js';\nimport { GPUTest } from '../gpu_test.js';\n\nexport enum BindingResourceType {\n  'error-buffer' = 'error-buffer',\n  'error-sampler' = 'error-sampler',\n  'error-textureview' = 'error-textureview',\n  'uniform-buffer' = 'uniform-buffer',\n  'storage-buffer' = 'storage-buffer',\n  'sampler' = 'sampler',\n  'sampled-textureview' = 'sampled-textureview',\n  'storage-textureview' = 'storage-textureview',\n}\n\nexport function resourceBindingMatches(b: GPUBindingType, r: BindingResourceType): boolean {\n  switch (b) {\n    case 'storage-buffer':\n    case 'readonly-storage-buffer':\n      return r === 'storage-buffer';\n    case 'sampled-texture':\n      return r === 'sampled-textureview';\n    case 'sampler':\n      return r === 'sampler';\n    case 'storage-texture':\n      return r === 'storage-textureview';\n    case 'uniform-buffer':\n      return r === 'uniform-buffer';\n    default:\n      unreachable('unknown GPUBindingType');\n  }\n}\n\nexport class ValidationTest extends GPUTest {\n  getStorageBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE });\n  }\n\n  getUniformBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM });\n  }\n\n  getErrorBuffer(): GPUBuffer {\n    this.device.pushErrorScope('validation');\n    const errorBuffer = this.device.createBuffer({\n      size: 1024,\n      usage: 0xffff, // Invalid GPUBufferUsage\n    });\n    this.device.popErrorScope();\n    return errorBuffer;\n  }\n\n  getSampler(): GPUSampler {\n    return this.device.createSampler();\n  }\n\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    this.device.popErrorScope();\n    return sampler;\n  }\n\n  getSampledTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getStorageTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE,\n    });\n  }\n\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.device\n      .createTexture({\n        size: { width: 0, height: 0, depth: 0 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.SAMPLED,\n      })\n      .createView();\n    this.device.popErrorScope();\n    return view;\n  }\n\n  getBindingResource(bindingType: BindingResourceType): GPUBindingResource {\n    switch (bindingType) {\n      case 'error-buffer':\n        return { buffer: this.getErrorBuffer() };\n      case 'error-sampler':\n        return this.getErrorSampler();\n      case 'error-textureview':\n        return this.getErrorTextureView();\n      case 'uniform-buffer':\n        return { buffer: this.getUniformBuffer() };\n      case 'storage-buffer':\n        return { buffer: this.getStorageBuffer() };\n      case 'sampler':\n        return this.getSampler();\n      case 'sampled-textureview':\n        return this.getSampledTexture().createView();\n      case 'storage-textureview':\n        return this.getStorageTexture().createView();\n      default:\n        unreachable('unknown binding resource type');\n    }\n  }\n\n  expectValidationError(fn: Function, shouldError: boolean = true): void {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (shouldError === false) {\n      fn();\n      return;\n    }\n\n    this.device.pushErrorScope('validation');\n    fn();\n    const promise = this.device.popErrorScope();\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const gpuValidationError = await promise;\n      if (!gpuValidationError) {\n        niceStack.message = 'Validation error was expected.';\n        this.rec.fail(niceStack);\n      } else if (gpuValidationError instanceof GPUValidationError) {\n        niceStack.message = `Captured validation error - ${gpuValidationError.message}`;\n        this.rec.debug(niceStack);\n      }\n    });\n  }\n}\n"],"file":"validation_test.js"}
{"version":3,"sources":["../../src/tools/crawl.ts"],"names":["fs","path","fg","require","assert","specSuffix","crawl","suite","specDir","existsSync","console","error","process","exit","specFiles","onlyFiles","sort","groups","file","f","substring","length","endsWith","testPath","filename","mod","description","undefined","g","push","trim","basename","group","readFileSync","makeListing","dirname"],"mappings":";;;;AAAA;AACA;AACA;AAIA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AAIA,MAAMC,UAAU,GAAG,UAAnB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,KAArB,EAAsE;AAC3E,QAAMC,OAAO,GAAG,gBAAgBD,KAAhC;;AACA,MAAI,CAACP,EAAE,CAACS,UAAH,CAAcD,OAAd,CAAL,EAA6B;AAC3BE,IAAAA,OAAO,CAACC,KAAR,CAAe,kBAAiBH,OAAQ,EAAxC;AACAI,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,QAAMC,SAAS,GAAG,MAAMZ,EAAE,CAAE,GAAEM,OAAQ,oBAAmBH,UAAW,GAA1C,EAA8C;AAAEU,IAAAA,SAAS,EAAE;AAAb,GAA9C,CAA1B;AACAD,EAAAA,SAAS,CAACE,IAAV;AAEA,QAAMC,MAA+B,GAAG,EAAxC;;AACA,OAAK,MAAMC,IAAX,IAAmBJ,SAAnB,EAA8B;AAC5B,UAAMK,CAAC,GAAGD,IAAI,CAACE,SAAL,CAAe,CAACZ,OAAO,GAAG,GAAX,EAAgBa,MAA/B,CAAV;;AACA,QAAIF,CAAC,CAACG,QAAF,CAAWjB,UAAX,CAAJ,EAA4B;AAC1B,YAAMkB,QAAQ,GAAGJ,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAeD,CAAC,CAACE,MAAF,GAAWhB,UAAU,CAACgB,MAArC,CAAjB;AACA,YAAMG,QAAQ,GAAI,SAAQhB,OAAQ,IAAGe,QAAS,UAA9C;AACA,YAAME,GAAG,GAAI,MAAM,OAAOD,QAAP,CAAnB;AACApB,MAAAA,MAAM,CAACqB,GAAG,CAACC,WAAJ,KAAoBC,SAArB,EAAgC,yCAAyCH,QAAzE,CAAN;AACApB,MAAAA,MAAM,CAACqB,GAAG,CAACG,CAAJ,KAAUD,SAAX,EAAsB,kDAAkDH,QAAxE,CAAN;AACAP,MAAAA,MAAM,CAACY,IAAP,CAAY;AACV5B,QAAAA,IAAI,EAAEsB,QADI;AAEVG,QAAAA,WAAW,EAAED,GAAG,CAACC,WAAJ,CAAgBI,IAAhB;AAFH,OAAZ;AAID,KAVD,MAUO,IAAI7B,IAAI,CAAC8B,QAAL,CAAcb,IAAd,MAAwB,YAA5B,EAA0C;AAC/C,YAAMc,KAAK,GAAGb,CAAC,CAACC,SAAF,CAAY,CAAZ,EAAeD,CAAC,CAACE,MAAF,GAAW,aAAaA,MAAvC,CAAd;AACA,YAAMK,WAAW,GAAG1B,EAAE,CAACiC,YAAH,CAAgBf,IAAhB,EAAsB,MAAtB,EAA8BY,IAA9B,EAApB;AACAb,MAAAA,MAAM,CAACY,IAAP,CAAY;AACV5B,QAAAA,IAAI,EAAE+B,KADI;AAEVN,QAAAA;AAFU,OAAZ;AAID,KAPM,MAOA;AACLhB,MAAAA,OAAO,CAACC,KAAR,CAAc,wBAAwBO,IAAtC;AACAN,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF;;AAED,SAAOI,MAAP;AACD;AAED,OAAO,SAASiB,WAAT,CAAqBV,QAArB,EAAyE;AAC9E,QAAMjB,KAAK,GAAGN,IAAI,CAAC8B,QAAL,CAAc9B,IAAI,CAACkC,OAAL,CAAaX,QAAb,CAAd,CAAd;AACA,SAAOlB,KAAK,CAACC,KAAD,CAAZ;AACD","sourcesContent":["// Node can look at the filesystem, but JS in the browser can't.\n// This crawls the file tree under src/suites/${suite} to generate a (non-hierarchical) static\n// listing file that can then be used in the browser to load the modules containing the tests.\n\n// tslint:disable: no-console\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst fg = require('fast-glob');\n\nimport { assert } from '../framework/index.js';\nimport { TestSuiteListingEntry } from '../framework/listing.js';\nimport { TestSpec } from '../framework/loader.js';\n\nconst specSuffix = '.spec.ts';\n\nexport async function crawl(suite: string): Promise<TestSuiteListingEntry[]> {\n  const specDir = 'src/suites/' + suite;\n  if (!fs.existsSync(specDir)) {\n    console.error(`Could not find ${specDir}`);\n    process.exit(1);\n  }\n\n  const specFiles = await fg(`${specDir}/**/{README.txt,*${specSuffix}}`, { onlyFiles: true });\n  specFiles.sort();\n\n  const groups: TestSuiteListingEntry[] = [];\n  for (const file of specFiles) {\n    const f = file.substring((specDir + '/').length);\n    if (f.endsWith(specSuffix)) {\n      const testPath = f.substring(0, f.length - specSuffix.length);\n      const filename = `../../${specDir}/${testPath}.spec.js`;\n      const mod = (await import(filename)) as TestSpec;\n      assert(mod.description !== undefined, 'Test spec file missing description: ' + filename);\n      assert(mod.g !== undefined, 'Test spec file missing TestGroup definition: ' + filename);\n      groups.push({\n        path: testPath,\n        description: mod.description.trim(),\n      });\n    } else if (path.basename(file) === 'README.txt') {\n      const group = f.substring(0, f.length - 'README.txt'.length);\n      const description = fs.readFileSync(file, 'utf8').trim();\n      groups.push({\n        path: group,\n        description,\n      });\n    } else {\n      console.error('Unrecognized file: ' + file);\n      process.exit(1);\n    }\n  }\n\n  return groups;\n}\n\nexport function makeListing(filename: string): Promise<TestSuiteListingEntry[]> {\n  const suite = path.basename(path.dirname(filename));\n  return crawl(suite);\n}\n"],"file":"crawl.js"}
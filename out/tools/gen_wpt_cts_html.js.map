{"version":3,"sources":["../../src/tools/gen_wpt_cts_html.ts"],"names":["promises","fs","generateMinimalQueryList","TestLoader","listing","printUsageAndExit","rc","console","error","process","exit","argv","length","outFile","templateFile","argsPrefixesFile","expectationsFile","expectationsPrefix","suite","entries","lines","filter","l","path","endsWith","map","generateFile","argsPrefixes","readFile","split","a","sort","b","expectationLines","expectations","Map","prefix","set","expLoop","exp","argsPrefix","startsWith","get","push","substring","Error","loader","files","Array","from","loadTestsFromCmdLine","undefined","q","result","line","writeFile"],"mappings":";;;;AAEA,SAASA,QAAQ,IAAIC,EAArB,QAA+B,IAA/B;AAEA,SAASC,wBAAT,QAAyC,6CAAzC;AAEA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,OAAT,QAAwB,wBAAxB;;AAEA,SAASC,iBAAT,CAA2BC,EAA3B,EAA6C;AAC3CC,EAAAA,OAAO,CAACC,KAAR,CAAe;;;;;;;;;;;;;;;;;;;CAAf;AAoBAC,EAAAA,OAAO,CAACC,IAAR,CAAaJ,EAAb;AACD;;AAED,IAAIG,OAAO,CAACE,IAAR,CAAaC,MAAb,KAAwB,CAAxB,IAA6BH,OAAO,CAACE,IAAR,CAAaC,MAAb,KAAwB,CAAzD,EAA4D;AAC1DP,EAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACD;;AAED,MAAM,IAGJQ,OAHI,EAIJC,YAJI,EAKJC,gBALI,EAMJC,gBANI,EAOJC,kBAPI,EAQJC,KARI,IASFT,OAAO,CAACE,IATZ;;AAWA,CAAC,YAAY;AACX,MAAIF,OAAO,CAACE,IAAR,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAMO,OAAO,GAAI,MAAMf,OAAvB;AACA,UAAMgB,KAAK,GAAGD,OAAO,CACnB;AADmB,KAElBE,MAFW,CAEJC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOX,MAAP,KAAkB,CAAlB,IAAuB,CAACU,CAAC,CAACC,IAAF,CAAOC,QAAP,CAAgB,GAAhB,CAFzB,EAGXC,GAHW,CAGPH,CAAC,IAAI,YAAYA,CAAC,CAACC,IAHZ,CAAd;AAIA,UAAMG,YAAY,CAACN,KAAD,CAAlB;AACD,GAPD,MAOO;AACL;AACA,UAAMO,YAAY,GAAG,CAAC,MAAM1B,EAAE,CAAC2B,QAAH,CAAYb,gBAAZ,EAA8B,MAA9B,CAAP,EAClBc,KADkB,CACZ,IADY,EAElBR,MAFkB,CAEXS,CAAC,IAAIA,CAAC,CAAClB,MAFI,EAGlBmB,IAHkB,CAGb,CAACD,CAAD,EAAIE,CAAJ,KAAUA,CAAC,CAACpB,MAAF,GAAWkB,CAAC,CAAClB,MAHV,CAArB;AAIA,UAAMqB,gBAAgB,GAAG,CAAC,MAAMhC,EAAE,CAAC2B,QAAH,CAAYZ,gBAAZ,EAA8B,MAA9B,CAAP,EACtBa,KADsB,CAChB,IADgB,EAEtBR,MAFsB,CAEfC,CAAC,IAAIA,CAAC,CAACV,MAFQ,CAAzB;AAIA,UAAMsB,YAAmC,GAAG,IAAIC,GAAJ,EAA5C;;AACA,SAAK,MAAMC,MAAX,IAAqBT,YAArB,EAAmC;AACjCO,MAAAA,YAAY,CAACG,GAAb,CAAiBD,MAAjB,EAAyB,EAAzB;AACD;;AAEDE,IAAAA,OAAO,EAAE,KAAK,MAAMC,GAAX,IAAkBN,gBAAlB,EAAoC;AAC3C;AACA,WAAK,MAAMO,UAAX,IAAyBb,YAAzB,EAAuC;AACrC,cAAMS,MAAM,GAAGnB,kBAAkB,GAAGuB,UAApC;;AACA,YAAID,GAAG,CAACE,UAAJ,CAAeL,MAAf,CAAJ,EAA4B;AAC1BF,UAAAA,YAAY,CAACQ,GAAb,CAAiBF,UAAjB,EAA8BG,IAA9B,CAAmCJ,GAAG,CAACK,SAAJ,CAAcR,MAAM,CAACxB,MAArB,CAAnC;AACA,mBAAS0B,OAAT;AACD;AACF;;AACD,YAAM,IAAIO,KAAJ,CAAU,0DAA0DN,GAApE,CAAN;AACD;;AAED,UAAMO,MAAM,GAAG,IAAI3C,UAAJ,EAAf;AACA,UAAM4C,KAAK,GAAGC,KAAK,CAACC,IAAN,EAAW,MAAMH,MAAM,CAACI,oBAAP,CAA4B,CAAChC,KAAK,GAAG,GAAT,CAA5B,CAAjB,EAAd;AAEA,UAAME,KAAK,GAAG,EAAd;;AACA,SAAK,MAAMgB,MAAX,IAAqBT,YAArB,EAAmC;AACjCP,MAAAA,KAAK,CAACuB,IAAN,CAAWQ,SAAX;;AACA,WAAK,MAAMC,CAAX,IAAgB,MAAMlD,wBAAwB,CAAC6C,KAAD,EAAQb,YAAY,CAACQ,GAAb,CAAiBN,MAAjB,CAAR,CAA9C,EAAkF;AAChFhB,QAAAA,KAAK,CAACuB,IAAN,CAAWP,MAAM,GAAGgB,CAApB;AACD;AACF;;AACD,UAAM1B,YAAY,CAACN,KAAD,CAAlB;AACD;AACF,CA/CD;;AAiDA,eAAeM,YAAf,CAA4BN,KAA5B,EAA6E;AAC3E,MAAIiC,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,IAAI,kFAAV;AAEAA,EAAAA,MAAM,IAAI,MAAMpD,EAAE,CAAC2B,QAAH,CAAYd,YAAZ,EAA0B,MAA1B,CAAhB;;AAEA,OAAK,MAAMwC,IAAX,IAAmBlC,KAAnB,EAA0B;AACxB,QAAIkC,IAAI,KAAKH,SAAb,EAAwB;AACtBE,MAAAA,MAAM,IAAI,IAAV;AACD,KAFD,MAEO;AACLA,MAAAA,MAAM,IAAK,+BAA8BC,IAAK,MAA9C;AACD;AACF;;AAED,QAAMrD,EAAE,CAACsD,SAAH,CAAa1C,OAAb,EAAsBwC,MAAtB,CAAN;AACD","sourcesContent":["// tslint:disable: no-console\n\nimport { promises as fs } from 'fs';\n\nimport { generateMinimalQueryList } from '../framework/generate_minimal_query_list.js';\nimport { TestSuiteListingEntry } from '../framework/listing.js';\nimport { TestLoader } from '../framework/loader.js';\nimport { listing } from '../suites/cts/index.js';\n\nfunction printUsageAndExit(rc: number): void {\n  console.error(`\\\nUsage:\n  tools/gen_wpt_cts_html OUTPUT_FILE TEMPLATE_FILE [ARGUMENTS_PREFIXES_FILE EXPECTATIONS_FILE EXPECTATIONS_PREFIX SUITE]\n  tools/gen_wpt_cts_html out-wpt/cts.html templates/cts.html\n  tools/gen_wpt_cts_html my/path/to/cts.html templates/cts.html arguments.txt myexpectations.txt 'path/to/cts.html' cts\n\nwhere arguments.txt is a file containing a list of arguments prefixes to both generate and expect\nin the expectations. The entire variant list generation runs *once per prefix*, so this\nmultiplies the size of the variant list.\n\n  ?worker=0&q=\n  ?worker=1&q=\n\nand myexpectations.txt is a file containing a list of WPT paths to suppress, e.g.:\n\n  path/to/cts.html?worker=0&q=cts:a/foo:bar={\"x\":1}\n  path/to/cts.html?worker=1&q=cts:a/foo:bar={\"x\":1}\n\n  path/to/cts.html?worker=1&q=cts:a/foo:bar={\"x\":3}\n`);\n  process.exit(rc);\n}\n\nif (process.argv.length !== 4 && process.argv.length !== 8) {\n  printUsageAndExit(0);\n}\n\nconst [\n  ,\n  ,\n  outFile,\n  templateFile,\n  argsPrefixesFile,\n  expectationsFile,\n  expectationsPrefix,\n  suite,\n] = process.argv;\n\n(async () => {\n  if (process.argv.length === 4) {\n    const entries = (await listing) as TestSuiteListingEntry[];\n    const lines = entries\n      // Exclude READMEs.\n      .filter(l => l.path.length !== 0 && !l.path.endsWith('/'))\n      .map(l => '?q=cts:' + l.path);\n    await generateFile(lines);\n  } else {\n    // Prefixes sorted from longest to shortest\n    const argsPrefixes = (await fs.readFile(argsPrefixesFile, 'utf8'))\n      .split('\\n')\n      .filter(a => a.length)\n      .sort((a, b) => b.length - a.length);\n    const expectationLines = (await fs.readFile(expectationsFile, 'utf8'))\n      .split('\\n')\n      .filter(l => l.length);\n\n    const expectations: Map<string, string[]> = new Map();\n    for (const prefix of argsPrefixes) {\n      expectations.set(prefix, []);\n    }\n\n    expLoop: for (const exp of expectationLines) {\n      // Take each expectation for the longest prefix it matches.\n      for (const argsPrefix of argsPrefixes) {\n        const prefix = expectationsPrefix + argsPrefix;\n        if (exp.startsWith(prefix)) {\n          expectations.get(argsPrefix)!.push(exp.substring(prefix.length));\n          continue expLoop;\n        }\n      }\n      throw new Error('All input lines must start with one of the prefixes. ' + exp);\n    }\n\n    const loader = new TestLoader();\n    const files = Array.from(await loader.loadTestsFromCmdLine([suite + ':']));\n\n    const lines = [];\n    for (const prefix of argsPrefixes) {\n      lines.push(undefined);\n      for (const q of await generateMinimalQueryList(files, expectations.get(prefix)!)) {\n        lines.push(prefix + q);\n      }\n    }\n    await generateFile(lines);\n  }\n})();\n\nasync function generateFile(lines: Array<string | undefined>): Promise<void> {\n  let result = '';\n  result += '<!-- AUTO-GENERATED - DO NOT EDIT. See WebGPU CTS: tools/gen_wpt_cts_html. -->\\n';\n\n  result += await fs.readFile(templateFile, 'utf8');\n\n  for (const line of lines) {\n    if (line === undefined) {\n      result += '\\n';\n    } else {\n      result += `<meta name=variant content='${line}'>\\n`;\n    }\n  }\n\n  await fs.writeFile(outFile, result);\n}\n"],"file":"gen_wpt_cts_html.js"}